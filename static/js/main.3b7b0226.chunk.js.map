{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isSignedIn","uiConfig","signInFlow","signInOptions","Firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","writeUserData","database","ref","set","console","log","getUserData","on","snapshot","val","setState","handleSubmit","event","preventDefault","name","refs","value","role","uid","developers","devIndex","findIndex","data","Date","getTime","toString","push","removeData","developer","newState","filter","updateData","initializeApp","_this2","unregisterAuthObserver","onAuthStateChanged","user","prevProps","prevState","_this3","react_default","a","createElement","Fragment","currentUser","StyledFirebaseAuth_default","FirebaseAuth","className","map","key","style","width","marginRight","onClick","onSubmit","type","placeholder","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b7b0226.chunk.js","sourcesContent":["const config = {\r\n    apiKey: \"AIzaSyDTl4HMEgs34c4YRDgE6QXVOPCZB3vd738\",\r\n    authDomain: \"pg-react-01.firebaseapp.com\",\r\n    databaseURL: \"https://pg-react-01.firebaseio.com\"\r\n  };\r\n  \r\n  export default config;\r\n  ","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Firebase from \"firebase\";\nimport config from \"./config\";\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      developers: []\n    };\n  }//end props\n    \n  // The component's Local state.\n  state = {\n      isSignedIn: false // Local signed-in state.\n    };\n\n // Configure FirebaseUI.\n uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [\n    Firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    Firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    Firebase.auth.EmailAuthProvider.PROVIDER_ID\n  ],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false\n  }\n};\n\n// Listen to the Firebase Auth state and set the local state.\ncomponentDidMount() {\n  this.unregisterAuthObserver = Firebase.auth().onAuthStateChanged(\n      (user) => this.setState({isSignedIn: !!user})\n  );\n  this.getUserData();\n}\n\n// Make sure we un-register Firebase observers when the component unmounts.\ncomponentWillUnmount() {\n  this.unregisterAuthObserver();\n}\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.writeUserData();\n    }\n  }\n\n  writeUserData = () => {\n    Firebase.database()\n      .ref(\"/\")\n      .set(this.state);\n    console.log(\"DATA SAVED\");\n  };\n\n  getUserData = () => {\n    let ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", snapshot => {\n      const state = snapshot.val();\n      this.setState(state);\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    let name = this.refs.name.value;\n    let role = this.refs.role.value;\n    let uid = this.refs.uid.value;\n\n    if (uid && name && role) {\n      const { developers } = this.state;\n      const devIndex = developers.findIndex(data => {\n        return data.uid === uid;\n      });\n      developers[devIndex].name = name;\n      developers[devIndex].role = role;\n      this.setState({ developers });\n    } else if (name && role) {\n      const uid = new Date().getTime().toString();\n      const { developers } = this.state;\n      developers.push({ uid, name, role });\n      this.setState({ developers });\n    }\n\n    this.refs.name.value = \"\";\n    this.refs.role.value = \"\";\n    this.refs.uid.value = \"\";\n  };\n\n  removeData = developer => {\n    const { developers } = this.state;\n    const newState = developers.filter(data => {\n      return data.uid !== developer.uid;\n    });\n    this.setState({ developers: newState });\n  };\n\n  updateData = developer => {\n    this.refs.uid.value = developer.uid;\n    this.refs.name.value = developer.name;\n    this.refs.role.value = developer.role;\n  };\n\n  render() {\n    const { developers } = this.state;\n    return (\n      <React.Fragment>\n           <div>\n              <h1>My App</h1>\n              <p>Welcome {Firebase.auth().currentUser}! </p>\n              <StyledFirebaseAuth uiConfig={this.uiConfig} FirebaseAuth={Firebase.auth()}/>\n            </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-xl-12\">\n              <h1>Firebase Development Team</h1>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-xl-12\">\n              {developers.map(developer => (\n                <div\n                  key={developer.uid}\n                  className=\"card float-left\"\n                  style={{ width: \"18rem\", marginRight: \"1rem\" }}\n                >\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">{developer.name}</h5>\n                    <p className=\"card-text\">{developer.role}</p>\n                    <button\n                      onClick={() => this.removeData(developer)}\n                      className=\"btn btn-link\"\n                    >\n                      Delete\n                    </button>\n                    <button\n                      onClick={() => this.updateData(developer)}\n                      className=\"btn btn-link\"\n                    >\n                      Edit\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-xl-12\">\n              <h1>Add new team member here</h1>\n              <form onSubmit={this.handleSubmit}>\n                <div className=\"form-row\">\n                  <input type=\"hidden\" ref=\"uid\" />\n                  <div className=\"form-group col-md-6\">\n                    <label>Name</label>\n                    <input\n                      type=\"text\"\n                      ref=\"name\"\n                      className=\"form-control\"\n                      placeholder=\"Name\"\n                    />\n                  </div>\n                  <div className=\"form-group col-md-6\">\n                    <label>Role</label>\n                    <input\n                      type=\"text\"\n                      ref=\"role\"\n                      className=\"form-control\"\n                      placeholder=\"Role\"\n                    />\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  Save\n                </button>\n              </form>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-xl-12\">\n              <h3>\n                Tutorial{\" \"}\n                <a href=\"https://sebhastian.com/react-firebase-real-time-database-guide\">\n                  here\n                </a>\n              </h3>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}