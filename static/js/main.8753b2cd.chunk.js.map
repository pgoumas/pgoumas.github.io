{"version":3,"sources":["config.js","components/Home/index.js","components/Marketing/index.js","components/Automation/index.js","components/Dashboard/index.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","Firebase","initializeApp","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","writeUserData","database","ref","set","state","console","log","getUserData","on","snapshot","val","setState","handleSubmit","event","preventDefault","name","refs","value","role","uid","developers","devIndex","findIndex","data","Date","getTime","toString","push","removeData","developer","newState","filter","updateData","users","prevProps","prevState","_this2","react_default","a","createElement","Fragment","className","map","key","style","width","marginRight","onClick","onSubmit","type","placeholder","href","React","Component","Marketing","Automation","Dashboard","react_router_dom","exact","to","react_router","path","component","App","components_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8753b2cd.chunk.js","sourcesContent":["const config = {\r\n    apiKey: \"AIzaSyDTl4HMEgs34c4YRDgE6QXVOPCZB3vd738\",\r\n    authDomain: \"pg-react-01.firebaseapp.com\",\r\n    databaseURL: \"https://pg-react-01.firebaseio.com\"\r\n  };\r\n  \r\n  export default config;\r\n  ","import React from 'react';\r\nimport Firebase from \"firebase\";\r\nimport config from \"../../config\";\r\n\r\nFirebase.initializeApp(config);\r\n\r\n// This is what you really care about\r\nclass Home extends React.Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        developers: [],\r\n        users:[]\r\n      };\r\n     \r\n    }//end props\r\n      \r\n    // Listen to the Firebase Auth state and set the local state.\r\n    componentDidMount() {\r\n      this._isMounted = true;\r\n      this.getUserData();\r\n    }\r\n  \r\n    // Make sure we un-register Firebase observers when the component unmounts.\r\n    componentWillUnmount() {\r\n      this._isMounted = false;\r\n      //this.unregisterAuthObserver();\r\n    }\r\n  \r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (prevState !== this.state) {\r\n        this.writeUserData();\r\n      }\r\n    }\r\n  \r\n    writeUserData = () => {\r\n      Firebase.database()\r\n        .ref(\"/\")\r\n        .set(this.state);\r\n      console.log(\"DATA SAVED\");\r\n    };\r\n  \r\n    getUserData = () => {\r\n      let ref = Firebase.database().ref(\"/\");\r\n      ref.on(\"value\", snapshot => {\r\n        const state = snapshot.val();\r\n        if (this._isMounted) {\r\n          this.setState(state);\r\n        }\r\n      });\r\n      console.log(\"User data loaded\");\r\n    };\r\n  \r\n    handleSubmit = event => {\r\n      event.preventDefault();\r\n      let name = this.refs.name.value;\r\n      let role = this.refs.role.value;\r\n      let uid = this.refs.uid.value;\r\n  \r\n      if (uid && name && role) {\r\n        const { developers } = this.state;\r\n        const devIndex = developers.findIndex(data => {\r\n          return data.uid === uid;\r\n        });\r\n        developers[devIndex].name = name;\r\n        developers[devIndex].role = role;\r\n        this.setState({ developers });\r\n      } else if (name && role) {\r\n        const uid = new Date().getTime().toString();\r\n        const { developers } = this.state;\r\n        developers.push({ uid, name, role });\r\n        this.setState({ developers });\r\n      }\r\n  \r\n      this.refs.name.value = \"\";\r\n      this.refs.role.value = \"\";\r\n      this.refs.uid.value = \"\";\r\n    };\r\n  \r\n    removeData = developer => {\r\n      const { developers } = this.state;\r\n      const newState = developers.filter(data => {\r\n        return data.uid !== developer.uid;\r\n      });\r\n      this.setState({ developers: newState });\r\n    };\r\n  \r\n    updateData = developer => {\r\n      this.refs.uid.value = developer.uid;\r\n      this.refs.name.value = developer.name;\r\n      this.refs.role.value = developer.role;\r\n    };\r\n  \r\n    render() {\r\n      const { developers } = this.state;\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <h1>Firebase Development Team</h1>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                {developers.map(developer => (\r\n                  <div\r\n                    key={developer.uid}\r\n                    className=\"card float-left\"\r\n                    style={{ width: \"18rem\", marginRight: \"1rem\" }}\r\n                  >\r\n                    <div className=\"card-body\">\r\n                      <h5 className=\"card-title\">{developer.name}</h5>\r\n                      <p className=\"card-text\">{developer.role}</p>\r\n                      <button\r\n                        onClick={() => this.removeData(developer)}\r\n                        className=\"btn btn-link\"\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                      <button\r\n                        onClick={() => this.updateData(developer)}\r\n                        className=\"btn btn-link\"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <h1>Add new team member here</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <div className=\"form-row\">\r\n                    <input type=\"hidden\" ref=\"uid\" />\r\n                    <div className=\"form-group col-md-6\">\r\n                      <label>Name</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        ref=\"name\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Name\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group col-md-6\">\r\n                      <label>Role</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        ref=\"role\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Role\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Save\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-xl-12\">\r\n                <h3>\r\n                  Tutorial{\" \"}\r\n                  <a href=\"https://sebhastian.com/react-firebase-real-time-database-guide\">\r\n                    here\r\n                  </a>\r\n                </h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n  export default Home;  ","import React from 'react';\r\n\r\n// This is what you really care about\r\nclass Marketing extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n    \t<div className=\"container-fluid justify-content-center\">\r\n        <h1>This is the Marketing Panel</h1>\r\n        </div>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default Marketing;  ","import React from 'react';\r\n\r\n// This is what you could care about\r\nclass Automation extends React.Component {\r\n\trender() {\r\n\t\treturn <h1>This is the Automation Panel</h1>;\r\n\t}\r\n}\r\nexport default Automation;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Route } from 'react-router-dom'\r\nimport Home from \"../Home\"\r\nimport Marketing from \"../Marketing\"\r\nimport Automation from \"../Automation\"\r\n\r\n\r\n// This is what you really care about\r\nclass Dashboard extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n     <div className=\"container-fluid\" >\r\n     <ul className=\"nav justify-content-center nav-tabs\">\r\n  <li className=\"nav-item\">\r\n      <NavLink className=\"nav-link\" exact to=\"/\">\r\n\t\t\t\t\t\tHome\r\n\t\t\t</NavLink>\r\n  </li>\r\n  <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" exact to=\"/marketing\" >\r\n\t\t\t\t\t\tMarketing\r\n\t\t\t\t\t</NavLink>\r\n  </li>\r\n  <li className=\"nav-item\">\r\n          <NavLink className=\"nav-link\" exact to=\"/automation\" >\r\n          Automation\r\n\t\t\t\t\t</NavLink>\r\n  </li>\r\n</ul>\r\n\t\t\t\t<div className=\"container-fluid justify-content-center\">\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/marketing\" component={Marketing} />\r\n          <Route exact path=\"/automation\" component={Automation} />\r\n\t\t\t\t</div>\r\n        </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport Dashboard from \"./components/Dashboard\"\n\n// YOU DON'T CARE ABOUT THIS\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n      <div className=\"d-flex p-2\" >\n\t\t\t<BrowserRouter>\n\t\t\t\t<Dashboard />\n\t\t\t</BrowserRouter>\n      </div>\n\t\t);\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}